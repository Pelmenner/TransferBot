version: "3.7"
services:
  controller:
    container_name: controller
    build:
      context: src
      dockerfile: ./controller/debug.Dockerfile
    environment:
      - MIGRATE_DB=${MIGRATE_DB-}
      - DB_CONNECT_STRING=user=$DB_USERNAME password=$DB_PASSWORD host=db port=5432 sslmode=disable
      - VK_SERVICE_HOST=messenger-vk:$VK_SERVICE_PORT
      - TG_SERVICE_HOST=messenger-tg:$TG_SERVICE_PORT
      - PORT=$CONTROLLER_PORT
    volumes:
      - bot-data:/app/data
    networks:
      - bot-net
    ports:
      - '40000:40000'
    depends_on:
      - db
    restart: on-failure
    security_opt:
      - "seccomp:unconfined"

  messenger-vk:
    container_name: messenger-vk
    build:
      context: src
      dockerfile: ./messengers/vk/Dockerfile
    environment:
      - CONTROLLER_HOST=controller:$CONTROLLER_PORT
      - VK_TOKEN=$VK_TOKEN
      - PORT=$VK_SERVICE_PORT
    volumes:
      - bot-data:/app/data
    networks:
      - bot-net
    depends_on:
      - controller

  messenger-tg:
    container_name: messenger-tg
    build:
      context: src
      dockerfile: ./messengers/tg/Dockerfile
    environment:
      - CONTROLLER_HOST=controller:$CONTROLLER_PORT
      - TG_TOKEN=$TG_TOKEN
      - PORT=$TG_SERVICE_PORT
    volumes:
      - bot-data:/app/data
    networks:
      - bot-net
    depends_on:
      - controller

  db:
    container_name: postgres
    image: postgres:alpine
    environment:
      - POSTGRES_USER=$DB_USERNAME
      - POSTGRES_PASSWORD=$DB_PASSWORD
    networks:
      - bot-net
    volumes:
      - db-storage:/var/lib/postgresql/data
volumes:
  bot-data:
  db-storage:
networks:
  bot-net:
    driver: bridge
